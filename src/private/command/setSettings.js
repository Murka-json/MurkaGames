/* eslint-disable no-unused-vars */
const redis = require('../../../lib/redis/redis.js');
const vk = require('../../../lib/vkontakte.js');

module.exports = async (ctx) => {
    const [data] = await vk.group.api.users.get({ user_id: ctx.senderId });

    await redis.get(`users.settings#${ctx.senderId}`).then(async(data) => {
        
        if (ctx.messagePayload?.action === "button_bets") {
            if (JSON.parse(data).bets_button) {
                
                redis.set(`users.settings#${ctx.senderId}`, JSON.stringify({ 
                    data, 
                    callback_button: JSON.parse(data).callback_button, 
                    bets_button: false, 
                    click_nickname: JSON.parse(data).click_nickname 
                }));
                ctx.send(`üéâ –û—Ç–ª–∏—á–Ω–æ! –° –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤–∞—à–∏ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã.`);
            } else {
                
                redis.set(`users.settings#${ctx.senderId}`, JSON.stringify({ 
                    data, 
                    callback_button: JSON.parse(data).callback_button, 
                    bets_button: true, 
                    click_nickname: JSON.parse(data).bets_button 
                }));
                ctx.send(`üéâ –û—Ç–ª–∏—á–Ω–æ! –° –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤–∞—à–∏ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã.`);
            }
        }

        if (ctx.messagePayload?.action === "callback_button") {
            if (JSON.parse(data).callback_button) {
                
                redis.set(`users.settings#${ctx.senderId}`, JSON.stringify({ 
                    data, 
                    callback_button: false, 
                    bets_button: JSON.parse(data).bets_button, 
                    click_nickname: JSON.parse(data).click_nickname 
                }));
                ctx.send(`üéâ –û—Ç–ª–∏—á–Ω–æ! –° –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —É –≤–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã Callback-–∫–Ω–æ–ø–∫–∏.`);
            } else {
                
                redis.set(`users.settings#${ctx.senderId}`, JSON.stringify({ 
                    data, 
                    callback_button: true, 
                    bets_button: JSON.parse(data).bets_button, 
                    click_nickname: JSON.parse(data).click_nickname 
                }));
                ctx.send(`üéâ –û—Ç–ª–∏—á–Ω–æ! –° –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —É –≤–∞—Å –∞–∫—Ç–∏–≤–Ω—ã Callback-–∫–Ω–æ–ø–∫–∏.\n\n–í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏—à—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –í–ö`);
            }
        }

        if (ctx.messagePayload?.action === "click_nickname") {
            if (JSON.parse(data).click_nickname) {
                
                redis.set(`users.settings#${ctx.senderId}`, JSON.stringify({ 
                    callback_button: JSON.parse(data).callback_button, 
                    bets_button: JSON.parse(data).bets_button, 
                    click_nickname: false 
                }));
                ctx.send(`üéâ –û—Ç–ª–∏—á–Ω–æ! –° –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤–∞—à–∏ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –∏–º—è –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã.`);
            } else {
                
                redis.set(`users.settings#${ctx.senderId}`, JSON.stringify({ 
                    callback_button: JSON.parse(data).callback_button, 
                    bets_button: JSON.parse(data).bets_button,  
                    click_nickname: true 
                }));
                ctx.send(`üéâ –û—Ç–ª–∏—á–Ω–æ! –° –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤–∞—à–∏ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –∏–º—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã.`);
            }
        }
    });

    await redis.get(`users.get#${ctx.senderId}`).then(async(data) => {
        let [ user_info ] = await vk.group.api.users.get({ user_ids: ctx.senderId });

        if(ctx.messagePayload?.action === "edit_name") {
            let name = await ctx.question(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º...`);

            if(name.text.length > 8) {
                return ctx.send(`üõë –ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 8-–º–∏ —Å–∏–º–≤–æ–ª–æ–≤`);
            }

            if(name.text.length < 1) {
                return ctx.send(`üõë –ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω–µ–µ 1 —Å–∏–º–≤–æ–ª–∞`);
            }

            let info = {
                id: user_info.id,
                first_name: name.text,
                last_name: user_info.last_name
            };
            
        await redis.set(`users.get#${ctx.senderId}`, JSON.stringify(info)).then(() => {
            return ctx.send(`üßø –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º –Ω–∞: ${name.text}`);
        }).catch(() => {
            return ctx.send(`üõë –ü—Ä–∏ —Å–º–µ–Ω–µ –Ω–∏–∫–Ω–µ–π–º–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π.`);
        });

        }
    });
};